{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/20200519_001/","result":{"data":{"site":{"siteMetadata":{"disqusShortname":"","subtitle":"web系の技術について紹介します","title":"kon-shou's blog","url":"https://blog.kon-shou.com"}},"markdownRemark":{"id":"6e12e9e3-b65e-5fd8-90df-5070a7a26686","html":"<p><strong>注：この文章はNoSQLとかAmplifyとかFirebaseも実際に使ってない人間がドキュメントと伝聞を元に書いてるので、たぶん間違いが含まれます。疑って読んでください。</strong></p>\n<h1 id=\"nosqlとrdbのデータへのアプローチの違い\" style=\"position:relative;\"><a href=\"#nosql%E3%81%A8rdb%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81%E3%81%AE%E9%81%95%E3%81%84\" aria-label=\"nosqlとrdbのデータへのアプローチの違い permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NoSQLとRDBのデータへのアプローチの違い</h1>\n<p>下記の文章は、NoSQLのおける設計をわかりやすく説明している。</p>\n<blockquote>\n<p>NoSQL 設計では、RDBMS 設計とは異なる考え方が必要です。RDBMS の場合は、アクセスパターンを考慮せずに正規化されたデータモデルを作成できます。その後、新しい質問とクエリの要件が発生したら、そのデータモデルを拡張することができます。Amazon DynamoDB の場合は対照的に、答えが必要な質問が分かるまで、スキーマの設計を開始しないでください。ビジネス上の問題とアプリケーションのユースケースを理解することが極めて重要です。</p>\n</blockquote>\n<div style=\"text-align: right\">\n(<a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-modeling-nosql.html\">\nDynamoDBでリレーショナルデータをモデル化するための最初のステップ\n</a>)\n</div>\n<p>RDBにおいて、SQLは優等生である。</p>\n<p>データが存在していれば「あれとこれを取得して、それをいい感じに見やすくして持ってきて」と言えば、そのとおりに持ってきてくれた。</p>\n<p>そのため「将来のビジネス要件が不確定な状態でも、とりあえずデータを入れておき、要件が確定した段階でSQLで必要なデータを取ってくる」という手法が可能だった。</p>\n<p>それに対してNoSQLの場合、そいつは優等生じゃない。</p>\n<p>「いい感じに見やすくして持ってきて」をしたいなら、そのようにデータを貯めておいて、それをそのままゴソッと持ってくるしかできない。</p>\n<p>これが上記のドキュメントにおける「アクセスパターン」というやつ。</p>\n<p>なぜ、そんな一見ではRDBの下位互換のようにも見えることになっているかの理由は、NoSQLがRDBのもつ高い処理コストを解決しているためである。</p>\n<blockquote>\n<p>この種のワンタイムクエリは、データにアクセスするための柔軟な API を提供しますが、大量の処理が必要です。</p>\n</blockquote>\n<blockquote>\n<p>RDBMS システムを減速させるもう 1 つの要素として、ACID 準拠のトランザクションフレームワークをサポートする必要がある点があります。</p>\n</blockquote>\n<blockquote>\n<p>これらの 2 つの要因は、従来の RDBMS プラットフォームをスケーリングするための主な障壁です。</p>\n</blockquote>\n<blockquote>\n<p>このため、高トラフィックのクエリに対して低レイテンシーの応答が必要な場合は、NoSQL システムを利用すると、一般的に技術的および経済的な効果がもたらされます。</p>\n</blockquote>\n<div style=\"text-align: right\">\n(<a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-relational-modeling.html\">\nDynamoDBでリレーショナルデータをモデル化するためのベストプラクティス\n</a>)\n</div>\n<p>処理コストを抑えるために、NoSQLでは基本的にはハッシュキーによるデータ取得を主眼において、ソートとか重いことをしたいなら、まぁ面倒くさいけど色々と頑張ってね★ という具合になる。</p>\n<p>そのためNoSQLに適してるデータの種類は「トランザクションデータ」とか「ユーザーの行動履歴」とかいう「ただあるがままを表示する」ようなものに向いている。</p>\n<p>その理由は、繰り返しになるが、NoSQLは難しいこと（データのJoinとか）を極力避けることで、RDBのボトルネックを解消することを目的に置いているため。</p>\n<h1 id=\"安くて楽したいからサーバーレスを使うのに、nosqlが辛い問題\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E3%81%8F%E3%81%A6%E6%A5%BD%E3%81%97%E3%81%9F%E3%81%84%E3%81%8B%E3%82%89%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%81%AB%E3%80%81nosql%E3%81%8C%E8%BE%9B%E3%81%84%E5%95%8F%E9%A1%8C\" aria-label=\"安くて楽したいからサーバーレスを使うのに、nosqlが辛い問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安くて楽したいからサーバーレスを使うのに、NoSQLが辛い問題</h1>\n<p>じゃあNoSQLでスキーマの設計はどうしたら良いの？という疑問に対して、下記のような文章が書かれている。</p>\n<blockquote>\n<p>DynamoDB の場合は対照的に、答えが必要な質問が分かるまで、スキーマの設計を開始しないでください。ビジネス上の問題とアプリケーションのユースケースを理解することが不可欠です。</p>\n</blockquote>\n<div style=\"text-align: right\">\n(<a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-general-nosql-design.html\">\nDynamoDB に合わせた NoSQL 設計\n</a>)\n</div>\n<p>「いやいやいや、そんな答えがわかった上でデータ入れることばっかじゃないし！こちとらスタートアップなんじゃ、とりあえず後で機能を考えるから、データだけ溜めさせてくれや。」が通じない。</p>\n<p>あらかじめ、モデルとその扱われ方を列挙して、それに合わせてデータ構造を定義したり、セカンダリインデックスを貼っていく、みたいなことが必要になる。</p>\n<p>ここで見出しのように「俺、楽したいのにサーバーレス選んだのに何でこんなめんどいことやってんだ…RDBならテーブル定義してデータ投げるだけでいいのに」ということになる。</p>\n<p>たぶん「モデルとその扱われ方を列挙」をスキップして、とにかく非正規化！データ重複！で先に進むこともできるだろうけど、その場合は「データが混沌」×「そのとり方もわからない」=「死亡」の未来になるはず。</p>\n<p>RDBだと正規化した上でデータを収めておけば、SQLの柔軟さのおかげで、どうにでもなることがNoSQLではならない。</p>\n<h1 id=\"firebaseとamplifyでのnosqlへのアプローチ\" style=\"position:relative;\"><a href=\"#firebase%E3%81%A8amplify%E3%81%A7%E3%81%AEnosql%E3%81%B8%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81\" aria-label=\"firebaseとamplifyでのnosqlへのアプローチ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FirebaseとAmplifyでのNoSQLへのアプローチ</h1>\n<p>以上が、NoSQLについての机上のお話で「じゃあ実際に作るとなるとどうなの？」ということで、たぶんメジャーなものでFirebaseとAmplifyがあげられる。</p>\n<p>FirebaseはFirestoreで、AmplifyはDynamoDB。</p>\n<p>どちらも良し悪しあるんだろうけど、ぱっと見と読んだり聞いたりする話だと、自分の考えは下記だ。</p>\n<p>Firebase </p>\n<ul>\n<li>データ構造の定義の自由度が高い。</li>\n<li>自由度が高い分、自分で考えなきゃいけない。</li>\n</ul>\n<p>Amplify</p>\n<ul>\n<li>データ構造の定義の自由度が、Firebaseほど高くない。</li>\n<li>その分、自分で考えなきゃいけないことが減る。</li>\n</ul>\n<p>そして自分がNoSQLを使って実装するなら、現時点ならAmplifyを選択する。</p>\n<h1 id=\"firebaseのnosqlfirestoreに対するアプローチ\" style=\"position:relative;\"><a href=\"#firebase%E3%81%AEnosqlfirestore%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81\" aria-label=\"firebaseのnosqlfirestoreに対するアプローチ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FirebaseのNoSQL(Firestore)に対するアプローチ</h1>\n<p><strong>この章は特に情報の正確性に懸念があります！！</strong></p>\n<p>FirebaseにおけるFirestoreへのデータの読み書きは、かなりフリーダムである。</p>\n<p>書き込み</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LA'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div style=\"text-align: right\">\n(<a href=\"https://firebase.google.com/docs/firestore/manage-data/add-data?hl=ja\">\nCloud Firestore にデータを追加する\n</a>)\n</div>\n<p>読み込み</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> citiesRef <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cities'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> citiesRef<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'capital'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'=='</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">snapshot</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No matching documents.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    snapshot<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">doc</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token string\">'=>'</span><span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error getting documents'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div style=\"text-align: right\">\n(<a href=\"https://firebase.google.com/docs/firestore/query-data/queries\">\nCloud Firestore で単純なクエリと複合クエリを実行する\n</a>)\n</div>\n<p>このままだとあまりに自由であるため、設計者が想定してしないデータ構造の書き込みが実装される可能性がある。</p>\n<p>そのような書き込みはセキュリティルールで防ぐ、というのがFirestoreのやり方らしい。</p>\n<p>そして聞くところによると、そのルールの設定がしんどいというお話。</p>\n<p>たぶん、ダックタイピングと似たような話で自由さとか実装速度とかとトレードオフなんだろうという気がする。</p>\n<p>ただ自分は根っからペチパーで「タイプヒンティング最高だぜ」というタイプなので向かないんだろうなと思ってる。</p>\n<h1 id=\"amplifyのnosqldynamodbに対するアプローチ\" style=\"position:relative;\"><a href=\"#amplify%E3%81%AEnosqldynamodb%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AD%E3%83%BC%E3%83%81\" aria-label=\"amplifyのnosqldynamodbに対するアプローチ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AmplifyのNoSQL(DynamoDB)に対するアプローチ</h1>\n<p>対してAmplifyのDynamoDBへのデータの読み書きは、AppSyncと連携してGraphQLを使用する場合だと、GraphQLのスキーマからメソッドが生成されるので、それを利用する。</p>\n<p>スキーマを下記のように定義すると</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token directive function\">@model</span>\n<span class=\"token directive function\">@key</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"byRepresentative\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"accountRepresentativeID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n    <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n    <span class=\"token attr-name\">phoneNumber</span><span class=\"token punctuation\">:</span> String\n    <span class=\"token attr-name\">accountRepresentativeID</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n    <span class=\"token attr-name\">ordersByDate</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Order<span class=\"token punctuation\">]</span> <span class=\"token directive function\">@connection</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">keyName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"byCustomerByDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token attr-name\">ordersByStatusDate</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Order<span class=\"token punctuation\">]</span> <span class=\"token directive function\">@connection</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">keyName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"byCustomerByStatusByDate\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div style=\"text-align: right\">\n(<a href=\"https://docs.amplify.aws/cli/graphql-transformer/dataaccess\">\nData access patterns\n</a>)\n</div>\n<p>下記のようなクエリが自動生成される。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getCustomer <span class=\"token operator\">=</span> <span class=\"token comment\">/* GraphQL */</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query GetCustomer($id: ID!) {\n    getCustomer(id: $id) {\n      id\n      name\n      phoneNumber\n      accountRepresentativeID\n      ordersByDate {\n        items {\n          id\n          customerID\n          accountRepresentativeID\n          productID\n          status\n          amount\n          date\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      ordersByStatusDate {\n        items {\n          id\n          customerID\n          accountRepresentativeID\n          productID\n          status\n          amount\n          date\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>そしてフロントのコードで、この <code class=\"language-text\">GetCustomer</code> を呼び出すという流れになる。</p>\n<p>これは上述の「答えが必要な質問が分かるまで、スキーマの設計を開始しないでください」を典型的に守っている気がする。</p>\n<p>スキーマには「どのキーでorderが発行されるのか」「どのモデルがリレーションを持つのか」をあらかじめ定義する必要があり、それはアクセスパターンにほかならない。</p>\n<p>そしてこのスキーマの遵守は、GraphQLによって担保される。</p>\n<p>例えば、GraphQLによるUpdateは、<code class=\"language-text\">GetCustomer</code> と同様に <code class=\"language-text\">updateOrder</code> が生成され、それを通して行うことになるからだ。そこで更新可能なプロパティは当然制限される。</p>\n<p>これは「NoSQLのデータ構造の柔軟性を損なう」とも取れると思うが、そこまでの柔軟性を求めていないケースだとしたらメリットが大きいはず。</p>\n<p>だいたいのWebアプリはそういうケースなんじゃないかと思う。</p>\n<h1 id=\"最後に\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\" aria-label=\"最後に permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後に</h1>\n<p>いつかこの考えに対する「実装した上で」のアンサーを書きたい。</p>\n<h1 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h1>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-general-nosql-design.html\">DynamoDB に合わせた NoSQL 設計</a></li>\n<li><a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-modeling-nosql.html\">DynamoDB でリレーショナルデータをモデル化するための最初のステップ</a></li>\n<li><a href=\"https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/bp-relational-modeling.html\">DynamoDB でリレーショナルデータをモデル化するためのベストプラクティス</a></li>\n<li><a href=\"https://docs.amplify.aws/cli/graphql-transformer/dataaccess\">Data access patterns</a></li>\n<li><a href=\"https://qiita.com/takyam/items/2b5c3ae8b28b9b27d4bb\">firebaseでちゃんと開発してみた</a></li>\n<li><a href=\"https://qiita.com/h1guchi/items/4c4fc1b11580b76409b9\">Amplify vs Firebase 比較してみた</a></li>\n<li><a href=\"https://medium.com/google-cloud-jp/firestore2-920ac799345c\">Cloud Firestoreの勘所 パート2 — データ設計</a></li>\n</ul>","fields":{"slug":"/posts/20200519/","tagSlugs":["/tag/no-sql/","/tag/firebase/","/tag/amplify/","/tag/graph-ql/"]},"frontmatter":{"date":"2020-05-19","tags":["NoSQL","Firebase","Amplify","GraphQL"],"title":"2020/5時点のNoSQLとかAmplifyとかFirebaseに関する理解","description":"NoSQL関連について、自分の理解を書き出しました。","image":null}}},"pageContext":{"slug":"/posts/20200519/"}},"staticQueryHashes":["1155056556","1525128060","783282510"]}